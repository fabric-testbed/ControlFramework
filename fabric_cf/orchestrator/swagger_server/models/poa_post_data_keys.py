# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fabric_cf.orchestrator.swagger_server.models.base_model_ import Model
from fabric_cf.orchestrator.swagger_server import util


class PoaPostDataKeys(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, key: str=None, comment: str=None):  # noqa: E501
        """PoaPostDataKeys - a model defined in Swagger

        :param key: The key of this PoaPostDataKeys.  # noqa: E501
        :type key: str
        :param comment: The comment of this PoaPostDataKeys.  # noqa: E501
        :type comment: str
        """
        self.swagger_types = {
            'key': str,
            'comment': str
        }

        self.attribute_map = {
            'key': 'key',
            'comment': 'comment'
        }
        self._key = key
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt) -> 'PoaPostDataKeys':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The poa_post_data_keys of this PoaPostDataKeys.  # noqa: E501
        :rtype: PoaPostDataKeys
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self) -> str:
        """Gets the key of this PoaPostDataKeys.


        :return: The key of this PoaPostDataKeys.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this PoaPostDataKeys.


        :param key: The key of this PoaPostDataKeys.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def comment(self) -> str:
        """Gets the comment of this PoaPostDataKeys.


        :return: The comment of this PoaPostDataKeys.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this PoaPostDataKeys.


        :param comment: The comment of this PoaPostDataKeys.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")  # noqa: E501

        self._comment = comment

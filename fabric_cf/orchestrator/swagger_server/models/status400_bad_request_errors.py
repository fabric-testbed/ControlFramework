# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fabric_cf.orchestrator.swagger_server.models.base_model_ import Model
from fabric_cf.orchestrator.swagger_server import util


class Status400BadRequestErrors(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, message: str='Bad Request', details: str=None, type: str='error', size: int=1, status: int=400):  # noqa: E501
        """Status400BadRequestErrors - a model defined in Swagger

        :param message: The message of this Status400BadRequestErrors.  # noqa: E501
        :type message: str
        :param details: The details of this Status400BadRequestErrors.  # noqa: E501
        :type details: str
        :param type: The type of this Status400BadRequestErrors.  # noqa: E501
        :type type: str
        :param size: The size of this Status400BadRequestErrors.  # noqa: E501
        :type size: int
        :param status: The status of this Status400BadRequestErrors.  # noqa: E501
        :type status: int
        """
        self.swagger_types = {
            'message': str,
            'details': str,
            'type': str,
            'size': int,
            'status': int
        }

        self.attribute_map = {
            'message': 'message',
            'details': 'details',
            'type': 'type',
            'size': 'size',
            'status': 'status'
        }
        self._message = message
        self._details = details
        self._type = type
        self._size = size
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Status400BadRequestErrors':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The status_400_bad_request_errors of this Status400BadRequestErrors.  # noqa: E501
        :rtype: Status400BadRequestErrors
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self) -> str:
        """Gets the message of this Status400BadRequestErrors.


        :return: The message of this Status400BadRequestErrors.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this Status400BadRequestErrors.


        :param message: The message of this Status400BadRequestErrors.
        :type message: str
        """

        self._message = message

    @property
    def details(self) -> str:
        """Gets the details of this Status400BadRequestErrors.


        :return: The details of this Status400BadRequestErrors.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details: str):
        """Sets the details of this Status400BadRequestErrors.


        :param details: The details of this Status400BadRequestErrors.
        :type details: str
        """

        self._details = details

    @property
    def type(self) -> str:
        """Gets the type of this Status400BadRequestErrors.


        :return: The type of this Status400BadRequestErrors.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Status400BadRequestErrors.


        :param type: The type of this Status400BadRequestErrors.
        :type type: str
        """

        self._type = type

    @property
    def size(self) -> int:
        """Gets the size of this Status400BadRequestErrors.


        :return: The size of this Status400BadRequestErrors.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this Status400BadRequestErrors.


        :param size: The size of this Status400BadRequestErrors.
        :type size: int
        """

        self._size = size

    @property
    def status(self) -> int:
        """Gets the status of this Status400BadRequestErrors.


        :return: The status of this Status400BadRequestErrors.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status: int):
        """Sets the status of this Status400BadRequestErrors.


        :param status: The status of this Status400BadRequestErrors.
        :type status: int
        """

        self._status = status

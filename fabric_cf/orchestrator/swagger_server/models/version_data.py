# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fabric_cf.orchestrator.swagger_server.models.base_model_ import Model
from fabric_cf.orchestrator.swagger_server import util


class VersionData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, reference: str=None, version: str=None):  # noqa: E501
        """VersionData - a model defined in Swagger

        :param reference: The reference of this VersionData.  # noqa: E501
        :type reference: str
        :param version: The version of this VersionData.  # noqa: E501
        :type version: str
        """
        self.swagger_types = {
            'reference': str,
            'version': str
        }

        self.attribute_map = {
            'reference': 'reference',
            'version': 'version'
        }
        self._reference = reference
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'VersionData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The version_data of this VersionData.  # noqa: E501
        :rtype: VersionData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reference(self) -> str:
        """Gets the reference of this VersionData.


        :return: The reference of this VersionData.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference: str):
        """Sets the reference of this VersionData.


        :param reference: The reference of this VersionData.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")  # noqa: E501

        self._reference = reference

    @property
    def version(self) -> str:
        """Gets the version of this VersionData.


        :return: The version of this VersionData.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this VersionData.


        :param version: The version of this VersionData.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version
